---
layout: post
title: Eurorack Digitally Controlled Analog Oscillator
tags: blog
score: 3
teaser: 
img: /images/dco_banner.png
imgalt: rtti
---

The latest installment in my open-source eurorack series (see previous installments [here](/posts/2013-01-27-hexbuffer.html) and [here](2013-05-14-headphone.html)) is an 80s-style digitally controlled oscillator.  Since a DCO is perhaps a bit less familiar than my previous modules, I'll first describe a bit of its history and design.  If you're curious about the fabrication process or eager to access the schematics, skip ahead to the [fabrication](#fabrication) section below.

![DCO front](/images/dco_front.jpg)

</div><div class="post">

# What is a DCO?

["Digitally Controlled Oscillator"](http://en.wikipedia.org/wiki/Digitally_controlled_oscillator) is primarily a marketing term, so it doesn't really have a precise technical definition.  Most generally, it's an oscillator that is somehow "more analog" than a fully digital oscillator, where the signal is output direct from a [DAC](http://en.wikipedia.org/wiki/Digital-to-analog_converter), but yet "less analog" than a traditional [VCO](http://en.wikipedia.org/wiki/Voltage-controlled_oscillator).  Sometimes a "DCO" is a fully analog oscillator being driven with a control voltage from a DAC, and [sometimes](http://en.wikipedia.org/wiki/Korg_Poly-800) "DCO" means a sum of digitally-created square waves.  However, the most common definition is the one that this module falls under: a fully analog saw tooth oscillator hard-synced to a digital counter.

This design (which is the only thing I'll call a 'DCO' from here on out) was first popularized by the Roland [Juno](http://en.wikipedia.org/wiki/Roland_Juno-60) series, and became quite popular for a time, especially in [low cost](http://www.vintagesynth.com/oberheim/mat6.php) [polyphonic](http://www.vintagesynth.com/misc/bit01.php) [analogs](http://en.wikipedia.org/wiki/Korg_Poly-61).  During the analog resurgance of the late 2000s/early 2010s, DCOs again became a go-to option, appearing in the [Prophet 08](http://en.wikipedia.org/wiki/Prophet_08) and the [Moog Minitaur](http://www.soundonsound.com/sos/may12/articles/moog-minitaur.htm), among others.

DCOs have a number of differences from the "more analog" VCOs: their tuning is very stable because the frequency ultimately comes from a crystal oscillator.  This makes them have less "analog drift", and generally speaking this makes for better bass tones.  The main price you pay for this stability is coarser tuning -  since the tone is coming from an integer divide down of a fixed clock, there's a limited number of "tuning steps", where an analog oscillator would have completely continuous tuning.

</div><div class="post">

# How do they work?

The core of a DCO is a high speed (usually in the low megahertz) digital clock.  This clock is then fed into a [counter](http://en.wikipedia.org/wiki/Programmable_interval_timer), which emits a pulse each time the count reaches a certain value.  That pulse then is connected to a switch that will short accross a charging capacitor, resetting the capacitor's voltage back to zero.  This creates a saw-tooth wave across the capacitor, whose frequency is set by the count value.

</div><div class="post">

<a id="fabrication"></a>

# Design and Fabrication

![DCO back](/images/dco_back.jpg)

As always, all schematics and source code are available under a permissive license at [github](https://github.com/russellmcc/dco).

The microcontroller I used was an AVR [xmega32A4U](http://www.atmel.com/devices/ATXMEGA32A4U.aspx?tab=documents), programmed using an Arduino port forked from the [Xmegaduino](https://github.com/akafugu/Xmegaduino) project by myself and [Brendan Powers](https://twitter.com/brendan0powers), located [here](https://github.com/brendan0powers/Xmegaduino).  If you're interested in Arduino programming on the xmega, I highly recommend you check out our port as it contains numerous bug fixes over the original, now unmaintained Xmegaduino project.

In addition to an arduino sketch, my design includes a [haskell pre-processor](https://github.com/russellmcc/dco/blob/master/firmware/tablegen.hs) to generate look-up tables for the tuning.  Anyone developing a DCO may find the code helpful.

The fabrication stack was the same as last time, that is, laser-cut stencils from [danger awesome](http://dangerawesome.co/), and PCBs from [OSH Park](http://oshpark.com/).  Everything worked quite well, except for the [TQFN](http://en.wikipedia.org/wiki/Quad-flat_no-leads_package) package I originally spec'ed for the microcontroller - TQFNs are quite hard to work with at home.  If you're a hobbiest assembling boards at home, I highly recommend choosing the much more friendly [TQFP](http://en.wikipedia.org/wiki/Quad_Flat_Package) package, if you have the option.
